package ServerEnglishGame;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import datauser.DataUser;
import java.awt.List;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author pham anh tuan
 */
public class ServerGame extends javax.swing.JFrame {

    
    private ArrayList<String> listQuestion; //list question
    private ArrayList<String> listAnswer; //list answer
    private static final String NAME_FILE_INPUT = "input.txt"; //name file of list question
    private static final String NAME_FILE_ANSWER = "output.txt";  //name file of list answer
    private ArrayList<Integer> arrayListNumber = new ArrayList<>();
    
    /**
     * Creates new form ServerGame
     */
    public ServerGame() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.listQuestion = this.ReadFile(NAME_FILE_INPUT);
        this.listAnswer = this.ReadFile(NAME_FILE_ANSWER);
        for(String temp : listAnswer)
        {
            System.out.println(temp);
        }
    }
    
    //function read a file data .txt
    //return the ArrayList<String>  have data is a string
    public ArrayList<String> ReadFile(String nameFileRead)
    {
        ArrayList<String> listArrayString  = new ArrayList<>();
        BufferedReader  bufferedReader = null;
        try {
            bufferedReader = new BufferedReader(new FileReader(nameFileRead));
            if(bufferedReader != null)
            {
                StringBuilder builder = new StringBuilder();
                String line = bufferedReader.readLine();

                while(line!= null)
                {
                    listArrayString.add(line);
                    line = bufferedReader.readLine();
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ServerGame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ServerGame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bufferedReader.close();
            } catch (IOException ex) {
                Logger.getLogger(ServerGame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return listArrayString;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taMain = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        taMain.setBackground(new java.awt.Color(255, 153, 255));
        taMain.setColumns(20);
        taMain.setRows(5);
        jScrollPane1.setViewportView(taMain);

        jLabel1.setBackground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("POINT :");

        jLabel2.setBackground(new java.awt.Color(255, 153, 153));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SERVER");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
    
    public void ServerAcept()
    {
        try {
            ServerSocket serverSocket = new ServerSocket(1997);
            this.taMain.append("\nServer are reading......\n");
            while(true)
            {
                Socket socket = null;
                socket = serverSocket.accept();
                this.taMain.append("\n A new client connection :" +  socket + "\n");
                
                ObjectInputStream  objectInputStream = new ObjectInputStream(socket.getInputStream());
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
                
                this.taMain.append("\n  Assigning new thread for this client "+ "\n");
                Thread  t = new ClientHandler(socket,objectInputStream,objectOutputStream);
                t.start();
            }
            
        } catch (IOException ex) {
            Logger.getLogger(ServerGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        ServerGame serverGame = new ServerGame();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                serverGame.setVisible(true);
            }
        });
        
        serverGame.ServerAcept();
        //serverGame.PrintArray();
        
        
    }
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taMain;
    // End of variables declaration//GEN-END:variables

    class ClientHandler extends Thread {

        private Socket socket = null;
        private ObjectInputStream  ois = null;
        private ObjectOutputStream oos = null;
        private static final int point = 0;
        public ClientHandler(Socket socket, ObjectInputStream objectInputStream, ObjectOutputStream objectOutputStream) {
            this.socket = socket;
            this.ois = objectInputStream;
            this.oos = objectOutputStream;
        }

        @Override
        public void run()
        {

             String toreturn;
             int point  = 10;
             int numberFailed = 0;

             while(true)
             {          
                int postition = (new Random()).nextInt(listQuestion.size());  
                if(!arrayListNumber.contains(postition))
                {
                    arrayListNumber.add(postition);
                    try {
                     
                        if(numberFailed == 3|| point < 0)
                        {
                            DataUser  dataUserServerStop = new DataUser("stop", point);
                            oos.writeObject(dataUserServerStop);
                            socket.close();
                            break;
                        }
                     
                        else
                        {
                            DataUser  dataUserServer = new DataUser(listQuestion.get(postition), point);
                            oos.writeObject(dataUserServer);

                            DataUser dataUserClient = null;
                            dataUserClient = (DataUser) ois.readObject();
                            taMain.append("\n" + dataUserClient.getData() + dataUserClient.getPointCurrent() + "\n");
                            point = dataUserClient.getPointCurrent();

                            System.out.println("CLIENT  : " + dataUserClient.getData() + " SERVER ANSWER : " + listAnswer.get(postition) + " QUESTION :" + listQuestion.get(postition));
                            if(dataUserClient.getData().equals(listAnswer.get(postition)))
                            {
                                point++;
                                numberFailed = 0;
                            }
                            else
                            {
                                point--;
                                numberFailed ++;
                            }
                            if(arrayListNumber.size() == listQuestion.size() && point > 0)
                            {
                                DataUser  dataUserServerWin = new DataUser("win", point);
                                oos.writeObject(dataUserServerWin);
                                socket.close();
                                break;
                            }
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(ServerGame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ServerGame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
             }
        }
    }
}
